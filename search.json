[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 couple authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Vincenzo Coia. Author, maintainer. Mariia Morello. Contributor. Chris Scarpone. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Coia V (2024). couple: Create Evaluate Copula-Based Multivariate Distributions. R package version 0.0.0.9000.","code":"@Manual{,   title = {couple: Create and Evaluate Copula-Based Multivariate Distributions},   author = {Vincenzo Coia},   year = {2024},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"couple-","dir":"","previous_headings":"","what":"Create and Evaluate Copula-Based Multivariate Distributions","title":"Create and Evaluate Copula-Based Multivariate Distributions","text":"Complex systems often demand insight multiple variables relationships. couple enables construct realistic multivariate distributions combining copulas univariate distributions, creating nuanced picture interconnected data. couple available yet.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create and Evaluate Copula-Based Multivariate Distributions","text":"couple yet CRAN. can install github executing following code R console: doesn’t work, check remotes package installed, first.","code":"remotes::install_github(\"probaverse/couple\")"},{"path":[]},{"path":"/reference/bind_marginals.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a multivariate distribution through a copula — bind_marginals","title":"Make a multivariate distribution through a copula — bind_marginals","text":"words, function transforms copula uniform scale original scale data, m3/s.","code":""},{"path":"/reference/bind_marginals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a multivariate distribution through a copula — bind_marginals","text":"","code":"bind_marginals(d1, d2, cop)"},{"path":"/reference/bind_marginals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a multivariate distribution through a copula — bind_marginals","text":"d1, d2 first second marginal distributions bind. cop copula object (class \"bicop\").","code":""},{"path":"/reference/bind_marginals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a multivariate distribution through a copula — bind_marginals","text":"bivariate probability distribution class \"bidst_cop\"","code":""},{"path":"/reference/bind_marginals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a multivariate distribution through a copula — bind_marginals","text":"","code":"d1 <- distionary::dst_norm(0, 1) #> Error in loadNamespace(x): there is no package called ‘distionary’ d2 <- distionary::dst_exp(1) #> Error in loadNamespace(x): there is no package called ‘distionary’ bind_marginals(   d1, d2,   cop_rvinecopulib(\"gumbel\", rotation = 0, parameters = 2) ) #> Error: object 'd1' not found bind_marginals(   d1, d2,   cop_ig(2, 3) ) #> Error: object 'd1' not found"},{"path":"/reference/cdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative Distribution Function — eval_cdf","title":"Cumulative Distribution Function — eval_cdf","text":"Access copula's cumulative distribution function (cdf).","code":""},{"path":"/reference/cdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative Distribution Function — eval_cdf","text":"","code":"eval_cdf(copula, u, v)  enframe_cdf(..., u, v, fn_prefix = \"cdf\", sep = \"_\")"},{"path":"/reference/cdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative Distribution Function — eval_cdf","text":"copula, ... copula, possibly multiple copulas case .... u, v Vectors values evaluate copula . fn_prefix enframe_, name function appear column(s). sep enframe'ing one copula, character separating fn_name copula name.","code":""},{"path":"/reference/cdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative Distribution Function — eval_cdf","text":"evaluated cdf vector form (eval_) data frame tibble form (enframe_).","code":""},{"path":[]},{"path":"/reference/cdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative Distribution Function — eval_cdf","text":"","code":"d1 <- cop_ig(20, 4) d2 <- cop_igl(1.1) eval_cdf(d1, u = 0.4, v = 1:9 / 10) #> [1] 0.04976371 0.11307370 0.17682749 0.23714904 0.29166738 0.33790950 0.37285156 #> [8] 0.39338619 0.39971484 enframe_cdf(d1, u = 0.4, v = 1:9 / 10) #> # A tibble: 9 × 3 #>      .u    .v    cdf #>   <dbl> <dbl>  <dbl> #> 1   0.4   0.1 0.0498 #> 2   0.4   0.2 0.113  #> 3   0.4   0.3 0.177  #> 4   0.4   0.4 0.237  #> 5   0.4   0.5 0.292  #> 6   0.4   0.6 0.338  #> 7   0.4   0.7 0.373  #> 8   0.4   0.8 0.393  #> 9   0.4   0.9 0.400  enframe_cdf(d1, d2, u = 1:9 / 10, v = 1:9 / 10) #> # A tibble: 9 × 4 #>      .u    .v cdf_d1 cdf_d2 #>   <dbl> <dbl>  <dbl>  <dbl> #> 1   0.1   0.1 0.0150 0.0191 #> 2   0.2   0.2 0.0656 0.0701 #> 3   0.3   0.3 0.143  0.146  #> 4   0.4   0.4 0.237  0.240  #> 5   0.5   0.5 0.344  0.349  #> 6   0.6   0.6 0.459  0.469  #> 7   0.7   0.7 0.581  0.597  #> 8   0.8   0.8 0.707  0.730  #> 9   0.9   0.9 0.842  0.865"},{"path":"/reference/convert_dataframe_to_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data frame to a tibble — convert_dataframe_to_tibble","title":"Convert a data frame to a tibble — convert_dataframe_to_tibble","text":"tibble package installed, convert data frame tibble.","code":""},{"path":"/reference/convert_dataframe_to_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data frame to a tibble — convert_dataframe_to_tibble","text":"","code":"convert_dataframe_to_tibble(df)"},{"path":"/reference/convert_dataframe_to_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a data frame to a tibble — convert_dataframe_to_tibble","text":"df Data frame possibly convert tibble.","code":""},{"path":"/reference/convert_dataframe_to_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a data frame to a tibble — convert_dataframe_to_tibble","text":"user tibble package installed, returns inputted data frame converted tibble. Otherwise, returns input.","code":""},{"path":"/reference/cop_ig.html","id":null,"dir":"Reference","previous_headings":"","what":"Integrated Gamma Copula — cop_ig","title":"Integrated Gamma Copula — cop_ig","text":"Makes copula belonging Integrated Gamma (IG) IG Limit (IGL) families copulas.","code":""},{"path":"/reference/cop_ig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integrated Gamma Copula — cop_ig","text":"","code":"cop_ig(theta, alpha)  cop_igl(alpha)"},{"path":"/reference/cop_ig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integrated Gamma Copula — cop_ig","text":"theta, alpha Parameters; positive numeric.","code":""},{"path":"/reference/cop_ig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integrated Gamma Copula — cop_ig","text":"","code":"cop_ig(0.3, 1.4) #> ig paramcop cop #>  #>  name : #> [1] \"ig\" cop_igl(1.4) #> igl paramcop cop #>  #>  name : #> [1] \"igl\""},{"path":"/reference/cop_parametric.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert p/d Representations to a Copula — cop_parametric","title":"Convert p/d Representations to a Copula — cop_parametric","text":"copula p d functions available (pfrk(), dfrk()), cop_parametric() creates copula draws functions.","code":""},{"path":"/reference/cop_parametric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert p/d Representations to a Copula — cop_parametric","text":"","code":"cop_parametric(   .name,   ...,   .variable = c(\"unknown\", \"continuous\", \"discrete\", \"mixed\"),   .env = parent.frame() )"},{"path":"/reference/cop_parametric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert p/d Representations to a Copula — cop_parametric","text":".name Name copula. Specifically, string suffix p d functions (\"frk\"). ... Parameters, argument, input name-value pairs. .variable Type random variable represented copula; one \"continuous\", \"discrete\", \"mixed\", \"unknown\". Warning: defaults \"unknown\", density pmf evaluated. .env Environment beginning search path looking representation, name environment (object can coerced environment .environment().) Defaults calling environment.","code":""},{"path":"/reference/cop_parametric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert p/d Representations to a Copula — cop_parametric","text":"bivariate copula object class \"paramcop\".","code":""},{"path":"/reference/cop_parametric.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert p/d Representations to a Copula — cop_parametric","text":"function anticipating p d copula functions parameters input single vector, either named cpar, third function argument.","code":""},{"path":"/reference/cop_parametric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert p/d Representations to a Copula — cop_parametric","text":"","code":"# Not working yet: # d <- cop_parametric(\"frk\", .variable = \"continuous\") # eval_density(d, u = c(0.3, 0.6, 0.5), v = c(0.4, 0.4, 0.9)) # eval_pmf(d, u = c(0.3, 0.6, 0.5), v = c(0.4, 0.4, 0.9), strict = FALSE) # eval_hazard(d, u = c(0.3, 0.6, 0.5), v = c(0.4, 0.4, 0.9))"},{"path":"/reference/cop_rvinecopulib.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a copula from the rvinecopulib package — cop_rvinecopulib","title":"Create a copula from the rvinecopulib package — cop_rvinecopulib","text":"Create copula rvinecopulib package","code":""},{"path":"/reference/cop_rvinecopulib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a copula from the rvinecopulib package — cop_rvinecopulib","text":"","code":"cop_rvinecopulib(dist, rotation, parameters)"},{"path":"/reference/cop_rvinecopulib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a copula from the rvinecopulib package — cop_rvinecopulib","text":"dist family name copula. rotation rotation copula; 0, 90, 180, 270. parameters vector parameters anticipated rvinecopulib.","code":""},{"path":"/reference/cop_rvinecopulib.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a copula from the rvinecopulib package — cop_rvinecopulib","text":"copula object class \"cop_rvinecopulib\".","code":""},{"path":"/reference/cop_rvinecopulib.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a copula from the rvinecopulib package — cop_rvinecopulib","text":"","code":"cop_rvinecopulib(\"frank\", rotation = 0, parameters = 3) #> $dname #> [1] \"frank\" #>  #> $rotation #> [1] 0 #>  #> $parameters #> [1] 3 #>  #> attr(,\"class\") #> [1] \"bicop_rvinecopulib\" \"bicop\""},{"path":"/reference/copula.html","id":null,"dir":"Reference","previous_headings":"","what":"Copula Objects — is_copula","title":"Copula Objects — is_copula","text":"Currently, function makes copula object nothing . idea can set things downstream, functions set_cdf() set_mean(). idea behind function expected flux.","code":""},{"path":"/reference/copula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copula Objects — is_copula","text":"","code":"is_copula(object)  is.copula(object)  copula(variable = c(\"unknown\", \"continuous\", \"discrete\", \"mixed\"))"},{"path":"/reference/copula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copula Objects — is_copula","text":"object Object tested variable Type random vector: \"continuous\", \"discrete\", \"mixed\", \"unknown\".","code":""},{"path":"/reference/copula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copula Objects — is_copula","text":"copula object nothing .","code":""},{"path":"/reference/density.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability Density Function — eval_density","title":"Probability Density Function — eval_density","text":"Access copula's probability density function (pdf).","code":""},{"path":"/reference/density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability Density Function — eval_density","text":"","code":"eval_density(copula, u, v, strict = TRUE)  enframe_density(..., u, v, fn_prefix = \"density\", sep = \"_\", strict = TRUE)"},{"path":"/reference/density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability Density Function — eval_density","text":"copula, ... copula, possibly multiple copulas case .... u, v Vectors values evaluate copula . strict evaluate density exists? TRUE ; FALSE, evaluates derivative cdf. fn_prefix enframe_, name function appear column(s). sep enframe'ing one copula, character separating fn_name copula name.","code":""},{"path":"/reference/density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability Density Function — eval_density","text":"evaluated density vector form (eval_) data frame tibble form (enframe_).","code":""},{"path":[]},{"path":"/reference/density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probability Density Function — eval_density","text":"","code":"d1 <- cop_ig(20, 4) d2 <- cop_igl(1.1) eval_density(d1, u = 0.4, v = 1:9 / 10) #> [1] 0.9690656 1.0757272 1.1908119 1.2939665 1.3688790 1.3790318 1.2426071 #> [8] 0.8194615 0.1685303 enframe_density(d1, u = 0.4, v = 1:9 / 10) #> # A tibble: 9 × 3 #>      .u    .v density #>   <dbl> <dbl>   <dbl> #> 1   0.4   0.1   0.969 #> 2   0.4   0.2   1.08  #> 3   0.4   0.3   1.19  #> 4   0.4   0.4   1.29  #> 5   0.4   0.5   1.37  #> 6   0.4   0.6   1.38  #> 7   0.4   0.7   1.24  #> 8   0.4   0.8   0.819 #> 9   0.4   0.9   0.169 enframe_density(d1, d2, u = 1:9 / 10, v = 1:9 / 10) #> # A tibble: 9 × 4 #>      .u    .v density_d1 density_d2 #>   <dbl> <dbl>      <dbl>      <dbl> #> 1   0.1   0.1       1.80       1.76 #> 2   0.2   0.2       1.62       1.52 #> 3   0.3   0.3       1.42       1.36 #> 4   0.4   0.4       1.29       1.26 #> 5   0.5   0.5       1.25       1.23 #> 6   0.6   0.6       1.27       1.28 #> 7   0.7   0.7       1.39       1.47 #> 8   0.8   0.8       1.66       2.00 #> 9   0.9   0.9       2.37       3.89"},{"path":"/reference/enframe_general.html","id":null,"dir":"Reference","previous_headings":"","what":"Enframe a distributional representation — enframe_general","title":"Enframe a distributional representation — enframe_general","text":"workhorse enframe_ family functions. enframe_general() evaluates specified distributional representation multiple distributions / copulas, places results data frame tibble.","code":""},{"path":"/reference/enframe_general.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enframe a distributional representation — enframe_general","text":"","code":"enframe_general(..., u, v, fn_prefix, sep, eval_fn, fn_args = list())"},{"path":"/reference/enframe_general.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enframe a distributional representation — enframe_general","text":"... Copulas evaluate u, v Vectors values evaluate copula . fn_prefix enframe_, name function appear column(s). sep enframe'ing one copula, character separating fn_name copula name. eval_fn Name eval_ function desired distributional representation, eval_cdf eval_density. fn_args named list arguments pass eval_fn function, besides copula u, v arguments (strict argument common, perhaps use case).","code":""},{"path":"/reference/enframe_general.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enframe a distributional representation — enframe_general","text":"data frame tibble input arguments (u, v), evaluated distributional representation copula ... column.","code":""},{"path":"/reference/enframe_general.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Enframe a distributional representation — enframe_general","text":"one copula specified ..., evaluation column named fn_prefix. one copula specified ..., evaluation columns named prefix fn_prefix followed copula names, sep . Copulas named first argument names, given, , input text. Names made unique using vctrs::vec_as_names() \"unique\" names repair. \"Unique\" chosen instead \"universal\" names anticipated syntactic eval_fn prefix; \"minimal\" sufficient may result columns names.","code":""},{"path":"/reference/eval_bi_density.bicop_rvinecopulib.html","id":null,"dir":"Reference","previous_headings":"","what":"Density of an rvinecopulib copula — eval_bi_density.bicop_rvinecopulib","title":"Density of an rvinecopulib copula — eval_bi_density.bicop_rvinecopulib","text":"Evaluates density copula rvinecopulib package.","code":""},{"path":"/reference/eval_bi_density.bicop_rvinecopulib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density of an rvinecopulib copula — eval_bi_density.bicop_rvinecopulib","text":"","code":"eval_bi_density.bicop_rvinecopulib(distribution, x, y)"},{"path":"/reference/eval_bi_density.bicop_rvinecopulib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density of an rvinecopulib copula — eval_bi_density.bicop_rvinecopulib","text":"distribution rvinecopulib copula, output cop_rvinecopulib(). x, y Vectors values 0 1 evaluate copula density.","code":""},{"path":"/reference/eval_bi_density.bicop_rvinecopulib.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density of an rvinecopulib copula — eval_bi_density.bicop_rvinecopulib","text":"vector copula density values.","code":""},{"path":"/reference/eval_bi_density.bicop_rvinecopulib.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Density of an rvinecopulib copula — eval_bi_density.bicop_rvinecopulib","text":"","code":"cop <- cop_rvinecopulib(\"frank\", rotation = 0, parameters = 2) eval_bi_density(cop, c(0.2, 0.7, 0.4), 0.2) #> Error in eval_bi_density(cop, c(0.2, 0.7, 0.4), 0.2): could not find function \"eval_bi_density\""},{"path":"/reference/eval_bi_density.bidst_cop.html","id":null,"dir":"Reference","previous_headings":"","what":"Density of a copula-based bivariate distribution — eval_bi_density.bidst_cop","title":"Density of a copula-based bivariate distribution — eval_bi_density.bidst_cop","text":"Density copula-based bivariate distribution","code":""},{"path":"/reference/eval_bi_density.bidst_cop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density of a copula-based bivariate distribution — eval_bi_density.bidst_cop","text":"","code":"eval_bi_density.bidst_cop(distribution, x, y)"},{"path":"/reference/eval_bi_density.bidst_cop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density of a copula-based bivariate distribution — eval_bi_density.bidst_cop","text":"distribution Bivariate distribution. x, y Vectors values evaluate distribution .","code":""},{"path":"/reference/eval_bi_density.bidst_cop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density of a copula-based bivariate distribution — eval_bi_density.bidst_cop","text":"Vector density values.","code":""},{"path":"/reference/eval_bi_density.bidst_cop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Density of a copula-based bivariate distribution — eval_bi_density.bidst_cop","text":"","code":"d <- bind_marginals(   distionary::dst_norm(0, 1),   distionary::dst_exp(1),   cop_ig(2, 4) ) #> Error in loadNamespace(x): there is no package called ‘distionary’ eval_bi_density(d, x = -3:3, y = 1) #> Error in eval_bi_density(d, x = -3:3, y = 1): could not find function \"eval_bi_density\""},{"path":"/reference/new_copula.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor Function for ","title":"Constructor Function for ","text":"Constructor Function \"cop\" Objects","code":""},{"path":"/reference/new_copula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor Function for ","text":"","code":"new_copula(l, variable, ..., class = character())"},{"path":"/reference/new_copula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor Function for ","text":"l List containing components copula object. variable Type random vector: \"continuous\", \"discrete\", \"mixed\", \"unknown\". ... Attributes add list. class making subclass, specify name .","code":""},{"path":"/reference/pmf.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability Mass Function — eval_pmf","title":"Probability Mass Function — eval_pmf","text":"Access copula's probability mass function (pmf).","code":""},{"path":"/reference/pmf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability Mass Function — eval_pmf","text":"","code":"eval_pmf(copula, u, v, strict = TRUE)  enframe_pmf(..., u, v, fn_prefix = \"pmf\", sep = \"_\", strict = TRUE)"},{"path":"/reference/pmf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability Mass Function — eval_pmf","text":"copula, ... copula, possibly multiple copulas case .... u, v Vectors values evaluate copula . strict evaluate pmf exists? TRUE ; FALSE, simply evaluates probability specified outcomes. fn_prefix enframe_, name function appear column(s). sep enframe'ing one copula, character separating fn_name copula name.","code":""},{"path":"/reference/pmf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability Mass Function — eval_pmf","text":"evaluated probabilities vector form (eval_) data frame tibble form (enframe_).","code":""},{"path":[]},{"path":"/reference/pmf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probability Mass Function — eval_pmf","text":"","code":"d1 <- cop_ig(20, 4) d2 <- cop_igl(1.1) eval_pmf(d1, u = 0.4, v = 1:9 / 10, strict = FALSE) #> [1] 0 0 0 0 0 0 0 0 0 enframe_pmf(d1, u = 0.4, v = 1:9 / 10, strict = FALSE) #> # A tibble: 9 × 3 #>      .u    .v   pmf #>   <dbl> <dbl> <dbl> #> 1   0.4   0.1     0 #> 2   0.4   0.2     0 #> 3   0.4   0.3     0 #> 4   0.4   0.4     0 #> 5   0.4   0.5     0 #> 6   0.4   0.6     0 #> 7   0.4   0.7     0 #> 8   0.4   0.8     0 #> 9   0.4   0.9     0 enframe_pmf(d1, d2, u = 1:9 / 10, v = 1:9 / 10, strict = FALSE) #> # A tibble: 9 × 4 #>      .u    .v pmf_d1 pmf_d2 #>   <dbl> <dbl>  <dbl>  <dbl> #> 1   0.1   0.1      0      0 #> 2   0.2   0.2      0      0 #> 3   0.3   0.3      0      0 #> 4   0.4   0.4      0      0 #> 5   0.5   0.5      0      0 #> 6   0.6   0.6      0      0 #> 7   0.7   0.7      0      0 #> 8   0.8   0.8      0      0 #> 9   0.9   0.9      0      0"},{"path":"/reference/realise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Sample from a Copula — realise","title":"Generate a Sample from a Copula — realise","text":"Draw n independent observations copula.","code":""},{"path":"/reference/realise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Sample from a Copula — realise","text":"","code":"realise(copula, n = 1)  realize(copula, n = 1)  observe(copula, n = 1)"},{"path":"/reference/realise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Sample from a Copula — realise","text":"copula Copula n Number observations generate","code":""},{"path":"/reference/realise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Sample from a Copula — realise","text":"Vector independent values drawn inputted copula","code":""},{"path":"/reference/realise.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generate a Sample from a Copula — realise","text":"realise(), realize(), observe() thing. Although language observe() common, alias , function name common amongst packages.","code":""},{"path":"/reference/rpd_indep.html","id":null,"dir":"Reference","previous_headings":"","what":"The Independence Copula — dindep","title":"The Independence Copula — dindep","text":"Density cdf independence copula.","code":""},{"path":"/reference/rpd_indep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Independence Copula — dindep","text":"","code":"dindep(u, v)  pindep(u, v)"},{"path":"/reference/rpd_indep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Independence Copula — dindep","text":"u, v Numeric vectors.","code":""},{"path":"/reference/rpd_indep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Independence Copula — dindep","text":"dindep gives density, pindep gives cdf, numeric vectors.","code":""},{"path":"/reference/rpd_indep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Independence Copula — dindep","text":"","code":"dindep(c(1, 0.3, 5, 0.8), c(0.5, 0.7, 3, 8)) #> [1] 1 1 0 0 dindep(c(0.2, 0.3), 4) #> [1] 0 0 pindep(c(1, 0.2), 0.5) #> [1] 0.5 0.1 pindep(c(-2, 8, NA), c(3, 4, 0.1)) #> [1]  0  1 NA pindep(c(-2, 8), c(4, 0.1)) #> [1] 0.0 0.1"},{"path":"/reference/survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Survival Function — eval_survival","title":"Survival Function — eval_survival","text":"Access copula's survival function.","code":""},{"path":"/reference/survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Survival Function — eval_survival","text":"","code":"eval_survival(copula, u, v)  enframe_survival(..., u, v, fn_prefix = \"survival\", sep = \"_\")"},{"path":"/reference/survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survival Function — eval_survival","text":"copula, ... copula, possibly multiple copulas case .... u, v Vectors values evaluate copula . fn_prefix enframe_, name function appear column(s). sep enframe'ing one copula, character separating fn_name copula name.","code":""},{"path":"/reference/survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Survival Function — eval_survival","text":"evaluated survival function vector form (eval_) data frame tibble form (enframe_).","code":""},{"path":[]},{"path":"/reference/survival.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Survival Function — eval_survival","text":"","code":"d1 <- cop_ig(20, 4) d2 <- cop_igl(1.1) eval_survival(d1, u = 0.4, v = 1:9 / 10) #> Error in UseMethod(\"eval_survival\"): no applicable method for 'eval_survival' applied to an object of class \"c('ig', 'paramcop', 'cop')\" enframe_survival(d1, u = 0.4, v = 1:9 / 10) #> Error in UseMethod(\"eval_survival\"): no applicable method for 'eval_survival' applied to an object of class \"c('ig', 'paramcop', 'cop')\" enframe_survival(d1, d2, u = 1:9 / 10, v = 1:9 / 10) #> Error in UseMethod(\"eval_survival\"): no applicable method for 'eval_survival' applied to an object of class \"c('ig', 'paramcop', 'cop')\""},{"path":"/reference/variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Type of random vector represented by a copula — variable","title":"Type of random vector represented by a copula — variable","text":"Copulas either discrete, continuous, mixed.","code":""},{"path":"/reference/variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Type of random vector represented by a copula — variable","text":"","code":"variable(copula)"},{"path":"/reference/variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Type of random vector represented by a copula — variable","text":"copula Copula","code":""},{"path":"/reference/variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Type of random vector represented by a copula — variable","text":"now, type variable – one \"continuous\", \"discrete\", \"mixed\".","code":""}]
